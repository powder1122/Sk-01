# 6월 9일 수업 정리
//
파이썬의 기본 문법, 모듈 중심(내부,외부), 객체 중심 프로그래밍
-->파이썬 기반 데이터 분석 (EDA, 알고리즘, 예측 추론, 분류)
----> 생성형 AI

이후 모듈 프로젝트 진행
//

- 목차
파이썬이란?
파이썬 특징
파이썬으로 무엇을 할 수 있나?


1. 파이썬이란?
1990년 귀도 반 로섬이 개발한 **인터프리터** 언어
                            인터프린터: 라인 단위 실행. 
인스타그램, 넷플릭스, 아마존 등에서 사용

2. 파이썬은 인간다운 언어이다.
자연어에 가깝게 만들어져 사람이 생각하는 방식을 그대로 표현할 수 있는 언어.
문법이 쉬워 상대적으로 빠르게 배울 수 있다.
무료(오픈소스)이지만 강력하다. 파이썬과 C를 조합하여 개발 가능
* 들여쓰기 실수 조심하기. 

3. 파이썬으로 할 수 있는 일
- 웹 프로그래밍: 웹 애플리케이션, 서버 제작 가능.(Flask, FastAPI...)
- 인공지능과 머신 러닝: 자연어 처리, 음성 인식과 같은 인공 지능 기술 구현.(다양한 라이브러리 제공)
- 수치 연산 프로그래밍: C로 작성된 넘파이 수치 연산 모듈을 통해 빠른 수치 연산 가능
- 데이터 분석: NumPy, pandas 등의 라이브러리를 활용해 데이터 처리, 통계 분석, 시각화를 손쉽게 수행.
(통계, 데이터 처리에 사용되는 pandas. Numpy와 사용하는 경우가 많다.)
-데이터베이스 프로그래밍: 데이터 분석 --> 데이터 수집이 필요. 데이터베이스에 접근하기 위한 도구 제공.
(pickle,pandas 사용)
- 시스템 유틸리티 제작하기: 운영체제 등의 시스템 명령어를 사용하는 도구를 통한 시스템 유틸리티 제작.
- GUI 프로그래밍
- C/C++와 결합
- 사물 인터넷: 라즈베리 파이를 제어

# 파이썬으로 할 수 없는 일
- 시스템과 밀접한 프로그래밍 영역: 운영체제, 엄청난 횟수의 반복과 연산이 필요한 프로그램 등 매우 빠른 속도를 요구하거나 하드웨어를 직접 건드려야 하는 프로그램에는 적합하지 않다.

- 모바일 프로그래밍: 파이썬은 데이터 분석과 AI쪽으로 주로 사용되며,안드로이드 개발에는 역부족하고 ios는 할 수 없다.


# VScode를 이용해 cell 단위 코드 작성 및 실행
스크립트 단위로 사용 시 불편함이 존재. --> cell을 사용하여 원하는 부분만 실행
**가상화 공간 생성** : 여러 버전을 사용하는 경우 충돌이 발생할 수 있기 때문에 가상 환경을 사용한다.
ctr + shift + P --> python create Environment --> python version select.

- 가상화의 목적 - 프로젝트별 관리: 라이브러리, 파이썬 버전

- .py 파일을 스크립트, 모듈이라고 부른다.
- 가상화 프로젝트를 만들 때마다 라이브러리 설치 필요
- venv: 기본 제공 가상화 공간간



# 변수와 자료형

*  변수: 파이썬에서 사용하는 변수는 객체를 가리키는 것
    * 실행 시점에 자료형이 결정된다. 
    * num = 10 --> 10이라는 값을 메모리에 저장, 이 공간의 주소를 num이라고 하는 메모리 공간에 저장. 따라서, num에는 10이라는 값을 가지는 주소값이 저장된다.
    * 메모리에 객체 형식으로 저장되는 것. 데이터는 모두 객체 형식으로 저장한다.
    * 변수는 문제 해결 과정에서 필요한 데이터들을 저장하였다가 필요할 때 사용하기 위해 사용하는 것이다.
    * 파이썬에서는 자료형이 다르게 바뀌어도 저장이 되기 때문에 주의가 필요하다.

* 변수 명명의 규칙
    1. 문자와 숫자, _를 사용할 수 있다.
    2. 대소문자를 구별하며, 의미 있는 단어를 사용하는 것이 좋다.
    3. 변수명은 숫자로 시작할 수 없다.
    4. 공백이 포함될 수 없다.
    5. 예약어를 변수명으로 사용할 수 없다.
    5. 변수 생성 시 주석을 달아주는 것이 좋다.

* 기본형 데이터 타입(자료형): 숫자형, 문자형, bool
* 컬렉션형(변수들의 묶음): 리스트, 튜플, 집합, 딕셔너리
* 시퀀스: 연속된 데이터 묶음. 순서에 맞게 문자를 나열
* 개행까지 표기해야 할 때, """...""" 또는 '''...''' 사용
* 파이썬에서는 문자열에 대한 연산이 가능

* 문자열 길이 반환 함수: len(변수: 시퀀스 형식의 데이터)
* 문자열: 시퀀스 데이터 --> 순서가 존재. 시퀀스 데이터들의 구분 --> index를 가지고 처리. (0부터 시작)

* 문자열 슬라이싱
    - 예시: s[시작 인덱스 : 종료 인덱스] --> 종료 인덱스를 만나면 탈출. 시작 번호부터 끝 번호까지의 문자를 뽑아 냄.(**끝 번호에 해당하는 것은 포함하지 않음**)

# 문자열 포맷팅
- 특정 문자열 형식으로 문자열 형식 정의 -> 문자열의 특정 위치에 값을 삽입
    - %d,%s,%c...등등 요즘은 자주 사용되지는 않는다.

- 문자열 저장 == 객체(메서드) 저장
    - format 함수를 사용한 포매팅 -- 마찬가지로 많이 사용되지는 않는다.

- f문자열 포매팅
    - 3.6버전부터 f문자열 포매팅 기능 제공
    - 문자열 앞에 f 접두사를 붙이면 f문자열 포매팅 기능 사용 가능
    - 예시: f'나는 내년이면 {age+1}살이 된다.

# 문자열 관련 함수들
- 문자 개수 세기: count
- 문자열 삽입: join
- 소문자를 대문자로 바꾸기: upper
- 대문자를 소문자로 바꾸기: lower
- 공백 지우기

# 자료형의 참과 거짓
- 문자열의 경우 문자가 존재하면 참, 비어있으면 거짓으로 판단
    - " ", [],{},()등의 경우에는 거짓으로 판단.
- 0은 거짓, 1은 참
- none(함수에 관한 값이 없을 때) 거짓

# 멤버 연산자와 식별 연산자
- 멤버연산자: 리스트 내에 포함되어있는지 확인하는 연산자.
    - x in list // 리스트 내에 포함되어 있으면 참참
    - y not in list // 리스트 내에 포함되어있지 않으면 참

- 식별 연산자: 두 개체의 메모리 위치를 비교함
    - x = 10, y = 10
    - x is y    //개체 메모리 위치나 값이 같다면 참
    - x is not y    //개체 메모리 위치나 값이 같지 않다면 참

## 시퀀스 자료형
- 저장 방식과 참조 방식을 고려해서 선택하여 사용
    * 리스트: 순서대로 나열한다. 실제 값이 아닌 값의 주소가 저장. 대괄호로 감싸고 각 요소 값은 쉼표로 구분한다.
    * 튜플: 리스트와 같지만 수정이 불가능하다. 안전하게 데이터를 처리해야 할 때 사용한다. 괄호로 감싼다.
    * 딕셔너리: 입력을 할 때 키와 밸류 형식으로 저장하는 형식. 키는 식별값, 밸류를 찾아갈 수 있는 값으로 중복될 수 없고 하나만 존재한다.(자물쇠와 열쇠 느낌, 중괄호 사용 dic_a = {'age':20})
    * 집합: 중복을 허용하지 않고 집합 연산이 가능하다.(교집합, 합집합, 차집합 연산)

### 리스트
- 리스트를 통해 반복 작업을 가능하게 한다.
- 리스트 안에는 어떠한 자료형도 포함 가능하다.
    * 공리스트 []
    * 숫자형 리스트 [1,2,3]
    * 문자형 리스트 ['a','b','c']
    * 합쳐진 리스트 [1,2,'a','b']
    * 중첩된 리스트 [1,2,['a','b']] #리스트로 구성된 리스트, 튜플로 구성된 리스트 등도 가능하다.
- 리스트의 인덱스를 통해 값 변경이 가능하다.


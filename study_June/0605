# 온라인 OT
git과 github

# 버전 관리 시스템
- 사용하는 이유
1. 무언가 잘못됐을 때 복구를 돕기 위하여
2. 프로젝트 진행 중 과거의 어떤 시점으로 돌아갈 수 있게 하기 위하여
3. 여러 사람이 프로젝트에 참여할 경우, 각자ㅏ 수정한 부분을 팀원 전체가 동기화하는 과정을 자동화하기 위하여
4. 소스 코드의 변경 사항을 추적하기 위하여
5. 소스 코드에서 누가 수정하였는지 추적하기 위하여
6. 대규모 수정 작업을 더욱 안전하게 진행하기 위하여
7. 코드의 특정 부분이 왜 그렇게 쓰여 졌는지 의미를 추적하기 위하여


# 용어
repository: 파일의 현재 버전과 변경 이력 정보를 저장하는 곳.
Tag: 특정 시점의 소스코드 전체를 복사 및 보관 태깅 (전체 코드를 스냅 샷 찍어 태깅하는 것. 날짜별로 사용하는 등의 방법)
check out: 저장소에ㅔ서 현재 작업 환경으로 소스파일을 가져오는 것
Commit: 체크 아웃한 파일의 수정이 끝난 경우 젖장소에 새로운 버전으로 갱신하는 일
conflict: 동일한 파일 변경이 충돌날 경우, 해결이 되어야지만 커밋이 가능하다. (최신 파일을 알 수 없기 때문에 충돌 발생기킴)
Merge: branch 변경사항을 다른 brach에 반영할 때 사용한다.

#git과 github의 차이
git: 소스 코드의 이력을 관리하는 분산 버전 관리 시스템
github: git 저장소를 관리하는 웹 호스팅 서비스


# SSH 퍼블릭 키 등록하기
-> ssh 키를 한 번만 등록하면 로그인 없이 클론 생성이 가능하다.

키 생성 명령어
깃 배쉬에서 
$ ssh-keygen -t ed25519 -C "your@example.com"

.pub이 퍼블릭, .이 없는 것이 프라이빗 키 파일. ex id_ed25519, id_ed25519.pub
퍼블릭 키를 복사하여 깃허브에서 새로운 키 생성. 이후 깃 배쉬에서 클론 생성(위치는 study folder)->

$git clone git@github.com~ 명령어로 클론 생성. 
키를 깃허브에 등록하여 이 컴퓨터에서 ssh 사용하여 클론을 생성할 수 있도록 하는 과정.

# CLI에서 github 사용하기.
-commit을 통해 동기화를 할 수 있다.
-깃에 일차적으로 저장한 후에 원격 저장소에 저장하는 형식.
-git add README.md 명령어로 READMEV파일을 저장할 것이라고 알린다.
-이후 git commit -m "test 문구 추가" 명령어로 commit.
-#git config --global user.email "~@~.com"으로 유저 등록 필수(누가 commit하는지 알아야 한다.)
-commit이 완료되면 git push를 통해 깃허브에 저장할 수 있다.

# 여러가지 IDE
oh my zsh 설치하기
fishshell 설치하기
Intellij 무료 지원 받기

#github 튜토리얼
github code -> select 명으로 branch 확인. 기본 main, 추가 branch 생성 가능. branches에서 한 번에 확인 가능. code tap에서는 README 파일의 내용을 discription한다.
##README 파일에 이 repository에서 어떤 기능을 하는지, 라이센스는 무엇인지 등을 적어주어야 포토폴리오로 활용 가능하다.##

- 원격 저장소에서 작업을 할 시, 컴퓨터와 데이터가 달라진다. -> 동기화 필요(pull)
##git pull 생활화##

- issue tap: 소스 코드에 문제가 생기거나, 수정을 해야하는 등 문제가 발생 시 issue에 등록한다.
일관적으로 처리하기 위해 템플릿 필요. settings에서 템플릿 작성 가능.

- pull rquests: 팀원들과 같이 작업할 경우 main branch에 바로 merge(push)할 수 없다. 
develop branch에 merge 후 이상이 없을 경우 main branch에 merge. 코드 리뷰, QA 등을 통해 충분한 검사가 필요하다.

- main branch, develop branch의 sync 필요. -> git pull을 통해 로컬 컴퓨터에도 develop branch 생성.
git chekout develop 명령어를 통해 main에서 develop branch로 변경이 가능하다.
이후 git merge main을 통해 동기화.

pr template : PULL_REQUEST_TEMPLATE.md 파일 생성 후 템플릿 작성

- actions: CI/CD로 모든 소프트웨어 워크 플로우를 자동화하기 쉽게 한다. 깃헙에서 코드를 바로 만들고 테스트하고 배포, 코드 검토, 지점 관리 및 문제 트리징 작업을 원하는 방식으로 수행

- projects: 칸반보드를 통해 작업 흐름 구조를 만들어 한 눈에 볼 수 있다. 계획 세우기 등 할 일을 한 번에 볼 수 있다.

- Wiki: 홈페이지처럼 꾸밀 수 있다. 잘 사용하지 않는다.(notion 주로 사용)

- Sequrity: 저장소와 조직 전체에서 코드와 비밀을 안전하게 유지하는 데 도움이 되는 보안 기능이 있다. 

- Insight: 어떤 사람이 얼마만큼 commit 했는지 알 수 있는 기능. 

# 라이선스 가이드
모든 라이선스가 무료가 아니다. ##라이선스를 준수하여 오픈 소스를 사용해야한다.##

# 아파치 소프트웨어 재단에서 만든 라이선스
-오픈소스
-개인적 혹은 상업적 이용 가능
-배포 및 수정 가능
-특허 신청 가능
-재배포 시, 소스 코드는 공개 안해도 되지만 ASF에서 개발되었다는 것을 명시해야 한다.

# MIT License
- 가장 유연한 라이선스
# BSD
- 버클리에서 개발한 유닉스 운영체제
# GNU GPL
- 자유 소프트웨어 재단에서 만든 라이선스.  아래의 5가지 항목을 강제한다.
- 퓨터 프로그램을 어떠한 목적으로든지 사용할 수 있지만, 법으로 제한하는 행위는 할 수 없다.
- 제나 프로그램의 소스 코드와 함께 판매하거나 소스 코드를 무료로 배포해야 한다.
- 퓨터 프로그램의 소스 코드를 용도에 따라 변경할 수 있다.
- 변경된 컴퓨터 프로그램 역시 프로그램의 소스 코드를 반드시 공개 배포해야 한다. <- 리차드 스톨만의 의지
- 변경된 프로그램 역시 반드시 똑같은 라이선스를 취해야 한다. 즉, GPL 라이선스를 적용해야 한다.

# 깃헙에서 라이선스 별 Repository 검색 가능
- 개발자는 라이선스를 준수해야 한다. 실수하지 않도록 주의할 것.

# Notion 소개
- 노션은 메모 + 협업 도구
- 칸반 보드 관리, CRM 활용, 위키 데이터베이스로 사용이 가능
- 자유도가 높아 처음 사용하기에는 어렵지만, 익숙해지면 매우 편리해짐.
- oopy: 우피는 노션 페이지를 최적화된 웹사이트로 바꾸는 기능
